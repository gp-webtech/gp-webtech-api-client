<?php

declare(strict_types=1);

/*
 * This file was generated by docler-labs/api-client-generator.
 *
 * Do not edit it manually.
 */

namespace Vanengers\GpWebtechApiPhpClient\Generated;

use DoclerLabs\ApiClientException\UnauthorizedResponseException;
use Pimple\Container as PimpleContainer;
use Pimple\Psr11\Container as Psr11PimpleContainer;
use Psr\Container\ContainerInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\ResponseInterface;
use Vanengers\GpWebtechApiPhpClient\Generated\Request\CreateUserRequest;
use Vanengers\GpWebtechApiPhpClient\Generated\Request\DeleteUserRequest;
use Vanengers\GpWebtechApiPhpClient\Generated\Request\ListUsersRequest;
use Vanengers\GpWebtechApiPhpClient\Generated\Request\LoginCheckPostRequest;
use Vanengers\GpWebtechApiPhpClient\Generated\Request\Mapper\RequestMapperInterface;
use Vanengers\GpWebtechApiPhpClient\Generated\Request\RequestInterface;
use Vanengers\GpWebtechApiPhpClient\Generated\Request\UpdateUserPasswordRequest;
use Vanengers\GpWebtechApiPhpClient\Generated\Request\UpdateUserRequest;
use Vanengers\GpWebtechApiPhpClient\Generated\Response\ResponseHandler;
use Vanengers\GpWebtechApiPhpClient\Generated\Schema\ListUser;
use Vanengers\GpWebtechApiPhpClient\Generated\Schema\ListUsersResponseBody;
use Vanengers\GpWebtechApiPhpClient\Generated\Schema\LoginCheckPostResponseBody;
use Vanengers\GpWebtechApiPhpClient\Generated\Schema\Mapper\ListUserMapper;
use Vanengers\GpWebtechApiPhpClient\Generated\Schema\Mapper\ListUsersResponseBodyMapper;
use Vanengers\GpWebtechApiPhpClient\Generated\Schema\Mapper\LoginCheckPostResponseBodyMapper;
use Vanengers\GpWebtechApiPhpClient\Generated\Serializer\ContentType\ContentTypeSerializerInterface;

abstract class ApiClient
{
    private ClientInterface $client;

    private ContainerInterface $container;

    private ?string $bearerToken = '';

    public function __construct(ClientInterface $client)
    {
        $this->client    = $client;
        $pimple          = new PimpleContainer();
        $this->container = new Psr11PimpleContainer($pimple);
        $serviceProvider = new ServiceProvider();
        $serviceProvider->register($pimple);
    }

    public function sendRequest(RequestInterface $request): ResponseInterface
    {
        return $this->client->sendRequest($this->container->get(RequestMapperInterface::class)->map($request));
    }

    public function getToken()
    {
        return $this->bearerToken;
    }

    public function setToken(string $bearerToken)
    {
        $this->bearerToken = $bearerToken;
    }

    private function init()
    {
        if (empty($this->bearerToken)) {
            $this->login();
        }
    }

    public function listUsers(ListUsersRequest $request): ListUsersResponseBody
    {
        $this->init();
        $request->setBearerToken($this->bearerToken);

        try {
            $response = $this->handleResponse($this->sendRequest($request));
        } catch (UnauthorizedResponseException $e) {
            $this->login();
            $request->setBearerToken($this->bearerToken);
            $response = $this->handleResponse($this->sendRequest($request));
        }

        return $this->container->get(ListUsersResponseBodyMapper::class)->toSchema($response);
    }

    public function createUser(CreateUserRequest $request): ListUser
    {
        $this->init();
        $request->setBearerToken($this->bearerToken);

        try {
            $response = $this->handleResponse($this->sendRequest($request));
        } catch (UnauthorizedResponseException $e) {
            $this->login();
            $request->setBearerToken($this->bearerToken);
            $response = $this->handleResponse($this->sendRequest($request));
        }

        return $this->container->get(ListUserMapper::class)->toSchema($response);
    }

    public function updateUser(UpdateUserRequest $request): ListUser
    {
        $this->init();
        $request->setBearerToken($this->bearerToken);

        try {
            $response = $this->handleResponse($this->sendRequest($request));
        } catch (UnauthorizedResponseException $e) {
            $this->login();
            $request->setBearerToken($this->bearerToken);
            $response = $this->handleResponse($this->sendRequest($request));
        }

        return $this->container->get(ListUserMapper::class)->toSchema($response);
    }

    public function deleteUser(DeleteUserRequest $request): bool
    {
        $this->init();
        $request->setBearerToken($this->bearerToken);

        try {
            $response = $this->handleResponse($this->sendRequest($request));
        } catch (UnauthorizedResponseException $e) {
            $this->login();
            $request->setBearerToken($this->bearerToken);
            $response = $this->handleResponse($this->sendRequest($request));
        }

        return $response[ContentTypeSerializerInterface::LITERAL_VALUE_KEY];
    }

    public function updateUserPassword(UpdateUserPasswordRequest $request): ListUser
    {
        $this->init();
        $request->setBearerToken($this->bearerToken);

        try {
            $response = $this->handleResponse($this->sendRequest($request));
        } catch (UnauthorizedResponseException $e) {
            $this->login();
            $request->setBearerToken($this->bearerToken);
            $response = $this->handleResponse($this->sendRequest($request));
        }

        return $this->container->get(ListUserMapper::class)->toSchema($response);
    }

    public function login_check_post(LoginCheckPostRequest $request): LoginCheckPostResponseBody
    {
        $response = $this->handleResponse($this->sendRequest($request));

        return $this->container->get(LoginCheckPostResponseBodyMapper::class)->toSchema($response);
    }

    protected function handleResponse(ResponseInterface $response)
    {
        return $this->container->get(ResponseHandler::class)->handle($response);
    }

    abstract public function login();
}
