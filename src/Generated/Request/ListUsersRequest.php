<?php

declare(strict_types=1);

/*
 * This file was generated by docler-labs/api-client-generator.
 *
 * Do not edit it manually.
 */

namespace Vanengers\GpWebtechApiPhpClient\Generated\Request;

use Vanengers\GpWebtechApiPhpClient\Generated\Schema\SerializableInterface;

class ListUsersRequest implements RequestInterface
{
    public const ORDER_BY_ID = 'id';

    public const ORDER_BY_EMAIL = 'email';

    public const ORDER_WAY_ASC = 'ASC';

    public const ORDER_WAY_DESC = 'DESC';

    private ?int $page = null;

    private ?string $orderBy = null;

    private ?string $orderWay = null;

    private ?string $filtersId = null;

    private ?string $filtersEmail = null;

    private ?string $filtersCreatedAt = null;

    private ?string $filtersUpdatedAt = null;

    private string $contentType = '';

    private ?string $bearerToken = '';

    public function getContentType(): string
    {
        return $this->contentType;
    }

    public function setPage(int $page): self
    {
        $this->page = $page;

        return $this;
    }

    public function setOrderBy(string $orderBy): self
    {
        $this->orderBy = $orderBy;

        return $this;
    }

    public function setOrderWay(string $orderWay): self
    {
        $this->orderWay = $orderWay;

        return $this;
    }

    public function setFiltersId(string $filtersId): self
    {
        $this->filtersId = $filtersId;

        return $this;
    }

    public function setFiltersEmail(string $filtersEmail): self
    {
        $this->filtersEmail = $filtersEmail;

        return $this;
    }

    public function setFiltersCreatedAt(string $filtersCreatedAt): self
    {
        $this->filtersCreatedAt = $filtersCreatedAt;

        return $this;
    }

    public function setFiltersUpdatedAt(string $filtersUpdatedAt): self
    {
        $this->filtersUpdatedAt = $filtersUpdatedAt;

        return $this;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getRoute(): string
    {
        return 'user';
    }

    public function getQueryParameters(): array
    {
        return \array_map(static function ($value) {
            return $value instanceof SerializableInterface ? $value->toArray() : $value;
        }, \array_filter(['page' => $this->page, 'orderBy' => $this->orderBy, 'orderWay' => $this->orderWay, 'filters[id]' => $this->filtersId, 'filters[email]' => $this->filtersEmail, 'filters[createdAt]' => $this->filtersCreatedAt, 'filters[updatedAt]' => $this->filtersUpdatedAt], static function ($value) {
            return null !== $value;
        }));
    }

    public function getRawQueryParameters(): array
    {
        return ['page' => $this->page, 'orderBy' => $this->orderBy, 'orderWay' => $this->orderWay, 'filters[id]' => $this->filtersId, 'filters[email]' => $this->filtersEmail, 'filters[createdAt]' => $this->filtersCreatedAt, 'filters[updatedAt]' => $this->filtersUpdatedAt];
    }

    public function getCookies(): array
    {
        return [];
    }

    public function getHeaders(): array
    {
        return ['Authorization' => \sprintf('Bearer %s', $this->bearerToken)];
    }

    public function getBody()
    {
        return null;
    }

    public function setBearerToken(?string $bearerToken): self
    {
        $this->bearerToken = $bearerToken;

        return $this;
    }

    public function getBearerToken(): string
    {
        return $this->bearerToken;
    }
}
