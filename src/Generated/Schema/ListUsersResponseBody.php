<?php

declare(strict_types=1);

/*
 * This file was generated by docler-labs/api-client-generator.
 *
 * Do not edit it manually.
 */

namespace Vanengers\GpWebtechApiPhpClient\Generated\Schema;

use JsonSerializable;

class ListUsersResponseBody implements SerializableInterface, JsonSerializable
{
    private ?int $total = null;

    private ?int $count = null;

    private ?int $offset = null;

    private ?int $itemsPerPage = null;

    private ?int $totalPages = null;

    private ?int $currentPage = null;

    private ?bool $hasNextPage = null;

    private ?bool $hasPreviousPage = null;

    private ?ListUserCollection $data = null;

    private array $optionalPropertyChanged = ['total' => false, 'count' => false, 'offset' => false, 'itemsPerPage' => false, 'totalPages' => false, 'currentPage' => false, 'hasNextPage' => false, 'hasPreviousPage' => false, 'data' => false];

    public function setTotal(int $total): self
    {
        $this->total                            = $total;
        $this->optionalPropertyChanged['total'] = true;

        return $this;
    }

    public function setCount(int $count): self
    {
        $this->count                            = $count;
        $this->optionalPropertyChanged['count'] = true;

        return $this;
    }

    public function setOffset(int $offset): self
    {
        $this->offset                            = $offset;
        $this->optionalPropertyChanged['offset'] = true;

        return $this;
    }

    public function setItemsPerPage(int $itemsPerPage): self
    {
        $this->itemsPerPage                            = $itemsPerPage;
        $this->optionalPropertyChanged['itemsPerPage'] = true;

        return $this;
    }

    public function setTotalPages(int $totalPages): self
    {
        $this->totalPages                            = $totalPages;
        $this->optionalPropertyChanged['totalPages'] = true;

        return $this;
    }

    public function setCurrentPage(int $currentPage): self
    {
        $this->currentPage                            = $currentPage;
        $this->optionalPropertyChanged['currentPage'] = true;

        return $this;
    }

    public function setHasNextPage(bool $hasNextPage): self
    {
        $this->hasNextPage                            = $hasNextPage;
        $this->optionalPropertyChanged['hasNextPage'] = true;

        return $this;
    }

    public function setHasPreviousPage(bool $hasPreviousPage): self
    {
        $this->hasPreviousPage                            = $hasPreviousPage;
        $this->optionalPropertyChanged['hasPreviousPage'] = true;

        return $this;
    }

    public function setData(ListUserCollection $data): self
    {
        $this->data                            = $data;
        $this->optionalPropertyChanged['data'] = true;

        return $this;
    }

    public function hasTotal(): bool
    {
        return $this->optionalPropertyChanged['total'];
    }

    public function hasCount(): bool
    {
        return $this->optionalPropertyChanged['count'];
    }

    public function hasOffset(): bool
    {
        return $this->optionalPropertyChanged['offset'];
    }

    public function hasItemsPerPage(): bool
    {
        return $this->optionalPropertyChanged['itemsPerPage'];
    }

    public function hasTotalPages(): bool
    {
        return $this->optionalPropertyChanged['totalPages'];
    }

    public function hasCurrentPage(): bool
    {
        return $this->optionalPropertyChanged['currentPage'];
    }

    public function hasHasNextPage(): bool
    {
        return $this->optionalPropertyChanged['hasNextPage'];
    }

    public function hasHasPreviousPage(): bool
    {
        return $this->optionalPropertyChanged['hasPreviousPage'];
    }

    public function hasData(): bool
    {
        return $this->optionalPropertyChanged['data'];
    }

    public function getTotal(): ?int
    {
        return $this->total;
    }

    public function getCount(): ?int
    {
        return $this->count;
    }

    public function getOffset(): ?int
    {
        return $this->offset;
    }

    public function getItemsPerPage(): ?int
    {
        return $this->itemsPerPage;
    }

    public function getTotalPages(): ?int
    {
        return $this->totalPages;
    }

    public function getCurrentPage(): ?int
    {
        return $this->currentPage;
    }

    public function getHasNextPage(): ?bool
    {
        return $this->hasNextPage;
    }

    public function getHasPreviousPage(): ?bool
    {
        return $this->hasPreviousPage;
    }

    public function getData(): ?ListUserCollection
    {
        return $this->data;
    }

    public function toArray(): array
    {
        $fields = [];
        if ($this->hasTotal()) {
            $fields['total'] = $this->total;
        }
        if ($this->hasCount()) {
            $fields['count'] = $this->count;
        }
        if ($this->hasOffset()) {
            $fields['offset'] = $this->offset;
        }
        if ($this->hasItemsPerPage()) {
            $fields['items_per_page'] = $this->itemsPerPage;
        }
        if ($this->hasTotalPages()) {
            $fields['total_pages'] = $this->totalPages;
        }
        if ($this->hasCurrentPage()) {
            $fields['current_page'] = $this->currentPage;
        }
        if ($this->hasHasNextPage()) {
            $fields['has_next_page'] = $this->hasNextPage;
        }
        if ($this->hasHasPreviousPage()) {
            $fields['has_previous_page'] = $this->hasPreviousPage;
        }
        if ($this->hasData()) {
            $fields['data'] = $this->data->toArray();
        }

        return $fields;
    }

    public function jsonSerialize(): array
    {
        return $this->toArray();
    }
}
